// Place your key bindings in this file to overwrite the defaults
[
    // projects
    {
        "key": "ctrl+alt+cmd+r",
        "command": "workbench.action.openRecent"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    // window management
    {
        "key": "cmd+alt+ctrl+w",
        "command": "workbench.action.switchWindow"
    },
    {
        "key": "ctrl+w",
        "command": "-workbench.action.switchWindow"
    },
    // font sizing
    {
        "key": "cmd+shift+-",
        "command": "editor.action.fontZoomIn"
    },
    {
        "key": "cmd+-",
        "command": "editor.action.fontZoomOut"
    },
    // panel
    {
        "key": "cmd+alt+ctrl+j j",
        "command": "workbench.action.togglePanel"
    },
    {
        "key": "cmd+alt+ctrl+j f",
        "command": "workbench.action.focusPanel"
    },
    {
        "key": "cmd+alt+ctrl+j x",
        "command": "workbench.action.closePanel"
    },
    {
        "key": "cmd+alt+ctrl+j d",
        "command": "workbench.action.nextPanelView"
    },
    {
        "key": "cmd+alt+ctrl+j e",
        "command": "workbench.action.previousPanelView"
    },
    {
        "key": "cmd+alt+ctrl+j m",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    // terminal
    {
        "key": "cmd+alt+ctrl+t t",
        "command": "workbench.action.terminal.focus"
    },
    {
        "key": "cmd+alt+ctrl+t d",
        "command": "workbench.action.terminal.focusNext"
    },
    {
        "key": "cmd+alt+ctrl+t e",
        "command": "workbench.action.terminal.focusPrevious"
    },
    // split navigation
    {
        "key": "ctrl+alt+cmd+k e",
        "command": "workbench.action.navigateUp",
    },
    {
        "key": "cmd+alt+ctrl+k d",
        "command": "workbench.action.navigateDown"
    },
    {
        "key": "cmd+alt+ctrl+k s",
        "command": "workbench.action.navigateLeft"
    },
    {
        "key": "cmd+alt+ctrl+k f",
        "command": "workbench.action.navigateRight"
    },
    {
        "key": "cmd+alt+ctrl+k k",
        "command": "workbench.action.navigateEditorGroups"
    },
    // split sizing
    {
        "key": "ctrl+alt+cmd+k r",
        "command": "workbench.action.increaseViewSize"
    },
    {
        "key": "ctrl+alt+cmd+k v",
        "command": "workbench.action.decreaseViewSize"
    },
    {
        "key": "ctrl+alt+cmd+k x",
        "command": "workbench.action.minimizeOtherEditors"
    },
    // split creation
    {
        "key": "cmd+alt+ctrl+k g",
        "command": "workbench.action.splitEditorRight"
    },
    {
        "key": "cmd+alt+ctrl+k c",
        "command": "workbench.action.splitEditorDown"
    },
    // explorer navigation
    // selection
    {
        "key": "ctrl+alt+cmd+f",
        "command": "editor.action.smartSelect.grow",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+d",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+w",
        "command": "-paredit.sexpRangeExpansion",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    // navigation
    {
        "key": "ctrl+alt+cmd+s",
        "command": "editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+cmd+\\",
        "command": "-editor.action.jumpToBracket",
        "when": "editorTextFocus"
    },
    // paredit
    {
        "key": "delete",
        "command": "paredit.deleteForward",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && paredit:keyMap == 'strict' && editorLangId =~ /clojure|scheme|lisp/"
    },
    {
        "key": "shift+backspace",
        "command": "-paredit.deleteForward",
        "when": "editorTextFocus && !editorHasMultipleSelections && !editorReadOnly && paredit:keyMap == 'strict' && editorLangId =~ /clojure|scheme|lisp/"
    },
    {
        "key": "ctrl+delete",
        "command": "paredit.killSexpForward",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+backspace",
        "command": "-paredit.killSexpForward",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+t",
        "command": "paredit.transpose",
        "when": "editorTextFocus && !editorReadOnly && paredit:keyMap =~ /original|strict/ && editorLangId =~ /clojure|scheme|lisp/"
    },
    {
        "key": "ctrl+alt+m",
        "command": "paredit.spliceSexp",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+s",
        "command": "-paredit.spliceSexp",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+alt+/",
        "command": "paredit.splitSexp",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    {
        "key": "ctrl+shift+alt+s",
        "command": "-paredit.splitSexp",
        "when": "editorTextFocus && !editorReadOnly && editorLangId =~ /clojure|scheme|lisp/ && paredit:keyMap =~ /original|strict/"
    },
    // folding, unbinding
    {
        "key": "alt+cmd+[",
        "command": "-editor.fold",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+cmd+]",
        "command": "-editor.unfold",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+k cmd+0",
        "command": "-editor.foldAll",
        "when": "editorTextFocus"
    },
    {
        "key": "cmd+k cmd+j",
        "command": "-editor.unfoldAll",
        "when": "editorTextFocus"
    },
    //
    {
        "key": "ctrl+alt+cmd+a",
        "command": "editor.fold",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+q",
        "command": "editor.foldAll",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+-",
        "command": "editor.unfold",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+p",
        "command": "editor.unfoldAll",
        "when": "editorTextFocus"
    },
    // inbox
    {
        "key": "ctrl+alt+cmd+g d",
        "command": "editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f3",
        "command": "-editor.action.dirtydiff.next",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+g e",
        "command": "editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f3",
        "command": "-editor.action.dirtydiff.previous",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+cmd+g r",
        "command": "git.revertChange"
    },
    {
        "key": "ctrl+alt+cmd+g s",
        "command": "git.stageChange"
    },
    {
        "key": "ctrl+alt+x",
        "command": "paredit.cutForwardSexp"
    },
    // windows
    {
        "key": "ctrl+alt+win+t r",
        "when": "isWindows",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "ctrl+shift+`",
        "when": "isWindows",
        "command": "-workbench.action.terminal.new"
    },
    {
        "key": "ctrl+j",
        "when": "isWindows",
        "command": "-workbench.action.togglePanel"
    },
    {
        "key": "ctrl+shift+j",
        "command": "-workbench.action.search.toggleQueryDetails",
        "when": "isWindows && (inSearchEditor || searchViewletFocus)"
    },
    {
        "key": "ctrl+j",
        "when": "isWindows",
        "command": "editor.action.joinLines"
    },
    {
        "key": "alt+delete",
        "when": "isWindows",
        "command": "deleteAllRight"
    },
    {
        "key": "alt+backspace",
        "when": "isWindows",
        "command": "deleteAllLeft"
    },
    // vspacecode bindings
	{
        "key": "tab",
        "command": "extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
    },
    {
        "key": "tab",
        "command": "-extension.vim_tab",
        "when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
    },
    {
        "key": "x",
        "command": "magit.discard-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "k",
        "command": "-magit.discard-at-point"
    },
    {
        "key": "-",
        "command": "magit.reverse-at-point",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "v",
        "command": "-magit.reverse-at-point"
    },
    {
        "key": "shift+-",
        "command": "magit.reverting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+v",
        "command": "-magit.reverting"
    },
    {
        "key": "shift+o",
        "command": "magit.resetting",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
    },
    {
        "key": "shift+x",
        "command": "-magit.resetting"
    },
    {
        "key": "x",
        "command": "-magit.reset-mixed"
    },
    {
        "key": "ctrl+u x",
        "command": "-magit.reset-hard"
    },
    {
        "key": "y",
        "command": "-magit.show-refs"
    },
    {
        "key": "y",
        "command": "vspacecode.showMagitRefMenu",
        "when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
    },
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+k",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+h",
        "command": "file-browser.stepOut",
        "when": "inFileBrowser"
    },
    {
        "key": "ctrl+l",
        "command": "file-browser.stepIn",
        "when": "inFileBrowser"
    },
    // vim visual line navigation
    {
        "key": "up",
        "command": "cursorUp",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "down",
        "command": "cursorDown",
        "when": "editorTextFocus && vim.active && !inDebugRepl && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "k",
        "command": "cursorUp",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "j",
        "command": "cursorDown",
        "when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode == 'Normal' && !suggestWidgetMultipleSuggestions && !suggestWidgetVisible"
    },
    {
        "key": "shift+escape",
        "command": "calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure' && editorLangId == 'clojure'"
    },
    {
        "key": "escape",
        "command": "-calva.clearInlineResults",
        "when": "calva:keybindingsEnabled && editorTextFocus && !editorHasMultipleSelections && !editorHasSelection && !editorReadOnly && !hasOtherSuggestions && !parameterHintsVisible && !selectionAnchorSet && !suggestWidgetVisible && editorLangId == 'clojure' && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+alt+cmd+k",
        "command": "workbench.action.focusActiveEditorGroup"
    },
    {
        "key": "ctrl+alt+cmd+g",
        "command": "magit.status"
    },
    {
        "key": "alt+x g",
        "command": "-magit.status"
	},
	{
		"key": "ctrl+alt+cmd+space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && !inputFocus && !whichkeyActive && focusedView == ''"
	},
	{
		"key": "ctrl+alt+cmd+space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
    },
    {
        "key": "alt+r",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "f2",
        "command": "-editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+enter",
        "command": "-calva.evaluateSelection",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && !suggestWidgetVisible && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+enter",
        "command": "calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "alt+enter",
        "command": "-calva.evaluateCurrentTopLevelForm",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "alt+enter",
        "command": "calva.evaluateEnclosingForm",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+shift+enter",
        "command": "-calva.evaluateEnclosingForm",
        "when": "calva:connected && calva:keybindingsEnabled && editorTextFocus && editorLangId == 'clojure'"
    },
    {
        "key": "ctrl+shift+k",
        "command": "editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    },
    {
        "key": "shift+cmd+k",
        "command": "-editor.action.deleteLines",
        "when": "textInputFocus && !editorReadonly"
    }
    // inbox
]
