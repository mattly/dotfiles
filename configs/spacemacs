;; -*- mode: dotspacemacs -*-
(defun dotspacemacs/layers ()
  "Configures Layers Declaration"
  (setq-default

   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '("~/code/mattly/dotfiles/configs/spacemacs-layers/")

   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers `(
                                       ;; # syntax & languages
                                       ;; ansible
                                       ;; c-c++
                                       (clojure :variables clojure-enable-fancify-symbols t)
                                       erlang-elixir
                                       ;; ess
                                       extra-langs ; idris openScad nix nim qml yaml rust wolfram
                                       ;; go
                                       ;; haskell
                                       html
                                       javascript
                                       ;; lua
                                       markdown
                                       ;; ocaml
                                       ;; purescript
                                       python
                                       ;; racket
                                       ruby
                                       scala
                                       shell-scripts ; fish!

                                       ;; # tools
                                       (auto-completion :variables
                                                        auto-completion-use-tab-instead-of-enter t
                                                        auto-completion-enable-company-help-tooltip t)
                                       dash
                                       evil-snipe
                                       git
                                       org
                                       osx
                                       prodigy
                                       ;; restclient
                                       smex
                                       syntax-checking

                                       ;; --- from custom config path
                                       ;; mine
                                       mattly
                                       prose)

   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(neotree org-repo-todo)

   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of the list
   ;; `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "User initialization for Spacemacs."

  ;; set farmhouse-theme to load
  (setq spacemacs-theme-name-to-package `(,@spacemacs-theme-name-to-package (farmhouse-light . farmhouse-theme) (farmhouse-dark . farmhouse-theme)))

  ;; FWIW I copied the defaults over from the template and have tweaked them to taste appearances
  (setq-default
   dotspacemacs-startup-banner 'official

   dotspacemacs-themes '(farmhouse-light farmhouse-dark)
   dotspacemacs-colorize-cursor-according-to-state t
   dotspacemacs-default-font '("Input Mono Narrow"
                               :size 14
                               :weight light
                               :width normal
                               :powerline-scale 1.5)
   dotspacemacs-fullscreen-at-startup nil
   dotspacemacs-fullscreen-use-non-native nil
   dotspacemacs-maximized-at-startup nil
   dotspacemacs-active-transparency 100
   dotspacemacs-inactive-transparency 100
   dotspacemacs-mode-line-unicode-symbols t
   dotspacemacs-smooth-scrolling t

   ;; hotkey configuration
   dotspacemacs-leader-key "SPC"
   dotspacemacs-major-mode-leader-key ","
   dotspacemacs-command-key ":"

   ;; etc config
   dotspacemacs-enable-paste-micro-state t
   dotspacemacs-guide-key-delay 0.4
   dotspacemacs-loading-progress-bar t
   dotspacemacs-smartparens-strict-mode nil
   dotspacemacs-persistent-server nil

   evil-snipe-enable-alternate-f-and-t-behaviors t
   ;; git layer variables
   git-enable-github-support t
   git-magit-status-fullscreen t)

  (add-to-list 'exec-path "~/.cabal/bin/"))

(defun dotspacemacs/config ()
  ;; auto complete
  (setq read-buffer-completion-ignore-case t
       completion-ignore-case t
       read-file-name-completion-ignore-case t)

  ;; auto-save
  (auto-save-mode 1)

  ;; git-gutter
  (setq git-gutter-fr:side 'left-fringe)

  ;; lisp-micro-state
  ;; override the built-in evil-lisp-state commands
  (dolist (item `(("H" . sp-beginning-of-previous-sexp)
                  ("j" . sp-down-sexp)
                  ("k" . sp-up-sexp)
                  ("L" . sp-beginning-of-next-sexp)))
    (let ((key (car item))
          (cmd (cdr item)))
      (eval
       `(progn
          (define-key evil-lisp-state-map ,(kbd key) ',cmd)
          (if evil-lisp-state-global
              (evil-leader/set-key
                ,(kbd (concat evil-lisp-state-leader-prefix " " key))
                (evil-lisp-state-enter-command ,cmd))
            (dolist (mm evil-lisp-state-major-modes)
              (evil-leader/set-key-for-mode mm
                ,(kbd (concat evil-lisp-state-leader-prefix " " key))
                (evil-lisp-state-enter-command ,cmd))))))))

  ;; magit
  (setq magit-repo-dirs '("~/code/mattly/" "~/code/wcm" "~/code/gemini"))

  ;; org
  (setq
   org-capture-templates '(("i" "Inbox"
                            item (file+headline "~/Documents/notes.org" "Inbox")
                            "- %?\n")
                           ("j" "Journal Entry"
                            entry (file+datetree "~/Documents/journal.org")
                            "* %?"
                            :empty-lines 1)
                           ("t" "Todo" entry
                            (file+headline "~/Documents/notes.org" "Inbox")
                            "** TODO %?")
                           )
   org-default-notes-file "~/Documents/notes.org"
   org-return-follows-link 1
   org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  (evil-declare-key 'normal evil-org-mode-map (kbd "<RET>") 'org-open-at-point)
  (evil-declare-key 'normal evil-org-mode-map (kbd "O") 'org-insert-heading-after-current)
  (evil-declare-key 'normal evil-org-mode-map (kbd "L") 'org-toggle-link-display)
  (evil-leader/set-key
    "CC" 'org-capture)

  ;; prodigy
  (load "~/code/emacs.prodigy.el" t)

  ;; powerline
  (setq powerline-default-separator 'slant)
  (spacemacs|diminish visual-line-mode " vl")

  ;; themes
  ;; reset themes when loading a new one
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))
  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  ;; tab stops
  (setq-default indent-tabs-mode nil)
  (setq default-tab-width 2
        tab-width 2)

  ;; keybindings
  ;; * VISUAL
  ;; <  retains region
  (defun retain-shift-left-visual ()
    "Shift left and restore visual selection"
    (interactive)
    (evil-shift-left (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (define-key evil-visual-state-map (kbd ">") 'retain-shift-right-visual)

  ;; >  retains region
  (defun retain-shift-right-visual ()
    "Shift right and restore visual selection"
    (interactive)
    (evil-shift-right (region-beginning) (region-end))
    (evil-normal-state)
    (evil-visual-restore))
  (define-key evil-visual-state-map (kbd "<") 'retain-shift-left-visual)

  ;; * NORMAL
  ;; RET  clears highlight
  (evil-global-set-key 'normal (kbd "RET") 'evil-search-highlight-persist-remove-all)
  ;; Y    Copies to end of line, like vim
  (define-key evil-normal-state-map "Y" (kbd "y$"))

  ;; mode hooks
  (defun my-web-mode-hook ()
    "Hooks for Web Mode"
    (define-key web-mode-map (kbd "C-/") 'web-mode-element-close)
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0))
  (add-hook 'web-mode-hook 'my-web-mode-hook)

  )

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ac-ispell-requires 4 t)
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["#ede9e7" "#ef001b" "#66a80e" "#d28508" "#088afb" "#af3574" "#27be72" "#272b34"])
 '(compilation-message-face (quote default))
 '(custom-safe-themes
   (quote
    ("d3f713f94f2806cfc2ab3c165442124de0efb039522accbf23b4452b6063c80b" "f738b502ce636d7f2ae7a2abddfcb6938fe59e4393c967b2041d6c69f1ecfa3e" "f90a9724e7fa3edf9c78b483f62892c70f8e8c1f3becace87d8cc82714472ee7" "bc576827b9af9122793018a7df3be98a53dc0b762113df8369e4f4cecae8c019" "dd0debc75903ff67d45fae5a4154010c01f428e9f985fe8635b680c61c12b2bc" "470c7fbdcc0ce991a7114700c86188ca66de01e2ef35dcbe6e20fde38d131d21" "d38072499b22b42c66da4b84327309e29088eed636e30bb1b73b476ce914ad1f" "525c4eb16ac3b91698a3701ea9a0fc86c71e3c340e27e121f5c628f269ab60aa")))
 '(fci-rule-color "#eee8d5")
 '(linum-format " %5i " t)
 '(magit-diff-use-overlays nil)
 '(magit-use-overlays nil)
 '(paradox-github-token t)
 '(rainbow-identifiers-cie-l*a*b*-lightness 80)
 '(rainbow-identifiers-cie-l*a*b*-saturation 18)
 '(ring-bell-function (quote ignore) t)
 '(vc-annotate-background nil)
 '(vc-annotate-color-map
   (quote
    ((20 . "#BC8383")
     (40 . "#CC9393")
     (60 . "#DFAF8F")
     (80 . "#D0BF8F")
     (100 . "#E0CF9F")
     (120 . "#F0DFAF")
     (140 . "#5F7F5F")
     (160 . "#7F9F7F")
     (180 . "#8FB28F")
     (200 . "#9FC59F")
     (220 . "#AFD8AF")
     (240 . "#BFEBBF")
     (260 . "#93E0E3")
     (280 . "#6CA0A3")
     (300 . "#7CB8BB")
     (320 . "#8CD0D3")
     (340 . "#94BFF3")
     (360 . "#DC8CC3"))))
 '(vc-annotate-very-old-color nil)
 '(when (not (facep (aref ansi-term-color-vector 0))))
 '(writeroom-fullscreen-effect (quote fullboth))
 '(writeroom-global-effects
   (quote
    (writeroom-toggle-alpha writeroom-toggle-menu-bar-lines writeroom-toggle-tool-bar-lines writeroom-toggle-vertical-scroll-bars)))
 '(writeroom-restore-window-config t)
 '(writeroom-width 72))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))

