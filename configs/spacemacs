;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; Checkers
     (spell-checking :variables
                     enable-flyspell-auto-completion t)
     syntax-checking

     ;; Completion
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-enable-help-tooltip t)

     ;; Emacs
     (ibuffer :variables ibuffer-group-buffers-by 'projects)
     org
     smex
     ;; (typography :variables typography-enable-typographic-editing t)

     ;; Frameworks
     ;; react

     ;; Fun
     emoji

     ;; Languages
     ;; asciidoc
     ;; c-c++
     clojure
     ;; common-lisp
     ;; csharp
     ;; csv
     ;; elixir
     ;; elm
     emacs-lisp
     ;; erlang
     ;; ess
     ;; extra-langs ;; julia
     ;; go
     ;; graphviz
     ;; haskell
     html
     ;; idris
     ;; ipython-notebook
     ;; java
     javascript
     ;; lua
     markdown
     ;; ocaml
     ;; purescript
     ;; python
     ruby
     ;; rust
     shell-scripts
     sql
     ;; swift
     ;; typescript
     yaml

     ;; Operating Systems
     (osx :variables osx-use-option-as-meta nil)

     ;; Source Control
     git
     ;; github ;; needs auth token in .gitconfig, which is public rn
     (version-control :variables version-control-diff-tool 'diff-hl)

     ;; Themes
     colors
     theming

     ;; Tools
     ;; ansible
     ;; command-log
     ;; dash
     ;; docker
     ;; fasd
     ;; geolocation
     imenu-list
     ;; nginx
     ;; pandoc
     ;; puppet
     ranger
     ;; restclient
     ;; salt
     (shell :variables
            shell-default-position 'bottom
            shell-default-height 30
            shell-default-shell 'multi-term
            shell-default-term-shell "/usr/local/bin/fish")
     ;; systemd
     terraform
     vagrant

     ;; Vim
     evil-cleverparens
     vim-empty-lines)

   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/user-config'.
   dotspacemacs-additional-packages '(sibilant-mode
                                      bats-mode
                                      lfe-mode

                                      farmhouse-theme
                                      material-theme
                                      tannat-theme
                                      all-the-icons

                                      hlinum
                                      parinfer
                                      flycheck-package
                                      editorconfig

                                      olivetti
                                      wordsmith-mode
                                      osx-dictionary)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(org-repo-todo)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages nil))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
   dotspacemacs-check-for-update t
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '((recents . 5)
                                (projects . 5))
   ;; True if the home buffer should respond to resize events.
   dotspacemacs-startup-buffer-responsive t
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(tannat
                         farmhouse-light
                         farmhouse-dark)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("SF Mono"
                               :size 14
                               :weight light
                               :width normal
                               :powerline-scale 1.3)

   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   dotspacemacs-command-key ":"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ t
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts 'cache
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers nil
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all',
   ;; `trailing', `changed' or `nil'. Default is `changed' (cleanup whitespace
   ;; on changed lines) (default 'changed)
   dotspacemacs-whitespace-cleanup nil))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put almost any
user code here.  The exception is org related code, which should be placed in
`dotspacemacs/user-config'."
  (setq-default
   git-magit-status-fullscreen t))

(defun dotspacemacs/user-config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."

  (add-text-properties (point-min) (point-max)
                       '(line-spacing 0.125 line-height 1.125))

  ;; Fira Code ligatures in railswaycat emacs
  (mac-auto-operator-composition-mode)

  ;; use COMMAND as META
  ;; and OPTION for character insertion of characters like ß√∑† etc.
  (setq mac-command-modifier 'meta)

  ;; auto complete
  (setq read-buffer-completion-ignore-case t
        completion-ignore-case t
        read-file-name-completion-ignore-case t)

  ;; auto save
  (auto-save-mode 1)

  ;; clojure
  (define-clojure-indent
    (checking '(1 nil (1)))
    (reg-sub '(1 nil (1))))

  ;; flycheck
  (eval-after-load 'flycheck
    '(flycheck-package-setup))
  (flycheck-define-checker proselint
    "A linter for prose."
    :command ("proselint" source-inplace)
    :error-patterns
    ((warning line-start (file-name) ":" line ":" column ": "
              (id (one-or-more (not (any " "))))
              (message (one-or-more not-newline)
                       (zero-or-more "\n" (any " ") (one-or-more not-newline)))
              line-end))
    :modes (text-mode markdown-mode gfm-mode))
  (add-to-list 'flycheck-checkers 'proselint)

  (add-hook 'markdown-mode-hook #'flycheck-mode)
  (add-hook 'text-mode-hook #'flycheck-mode)

  ;; hlinum
  (hlinum-activate)

  ;; javascript
  (setq js2-strict-missing-semi-warning nil)

  ;; magit
  (setq magit-repository-directories '("~/code" "~/projects"))

  ;; parinfer
  (setq parinfer-extensions
        '(defaults pretty-parens evil smart-yank)
        parinfer-auto-switch-indent-mode nil
        parinfer-auto-switch-indent-mode-when-closing nil
        parinfer-lighters '("→" . "❪❫"))
  (spacemacs/set-leader-keys "t/" 'parinfer-toggle-mode)
  (add-hook 'clojure-mode-hook #'parinfer-mode)
  (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)

  ;; org
  (setq
   org-bullets-bullet-list '("§" "¶" "✱" "✳︎" "▪︎" "•" "・")
   org-ellipsis "⤵"
   org-default-notes-file "~/Documents/notes.org"
   org-return-follows-link 1)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby t)
     (sh t)))
  (evil-declare-key 'normal evil-org-mode-map (kbd "<RET>") 'org-open-at-point)
  (evil-declare-key 'normal evil-org-mode-map (kbd "L") 'org-toggle-link-display)

  ;; neotree
  (setq neo-vc-integration nil)
  (setq neo-theme 'icons)
  (defun neo-buffer--insert-fold-symbol (name &optional file-name)
    "Custom overriding function for the fold symbol.
`NAME' decides what fold icon to use, while `FILE-NAME' decides
what file icon to use."
    (or (and (equal name 'open)  (insert (all-the-icons-icon-for-dir file-name "down")))
        (and (equal name 'close) (insert (all-the-icons-icon-for-dir file-name "right")))
        (and (equal name 'leaf)  (insert (format "\t\t\t%s\t" (all-the-icons-icon-for-file file-name))))))
  (defun neo-buffer--insert-dir-entry (node depth expanded)
    (let ((node-short-name (neo-path--file-short-name node)))
      (insert-char ?\s (* (- depth 1) 2)) ; indent
      (when (memq 'char neo-vc-integration)
        (insert-char ?\s 2))
      (neo-buffer--insert-fold-symbol
       (if expanded 'open 'close) node)
      (insert-button (concat node-short-name "/")
                     'follow-link t
                     'face neo-dir-link-face
                     'neo-full-path node
                     'keymap neotree-dir-button-keymap)
      (neo-buffer--node-list-set nil node)
      (neo-buffer--newline-and-begin)))
  (defun neo-buffer--insert-file-entry (node depth)
    (let ((node-short-name (neo-path--file-short-name node))
          (vc (when neo-vc-integration (neo-vc-for-node node))))
      (insert-char ?\s (* (- depth 1) 2)) ; indent
      (when (memq 'char neo-vc-integration)
        (insert-char (car vc))
        (insert-char ?\s))
      (neo-buffer--insert-fold-symbol 'leaf node-short-name)
      (insert-button node-short-name
                     'follow-link t
                     'face (if (memq 'face neo-vc-integration)
                               (cdr vc)
                             neo-file-link-face)
                     'neo-full-path node
                     'keymap neotree-file-button-keymap)
      (neo-buffer--node-list-set nil node)
      (neo-buffer--newline-and-begin)))

  ;; powerline
  (setq powerline-default-separator 'bar)

  ;; themes
  ;; reset themes when loading a new one
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))
  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  ;; tab stops
  (setq-default indent-tabs-mode nil)

  ;; * NORMAL
  ;; RET  clears highlight
  (evil-global-set-key 'normal (kbd "RET") 'evil-search-highlight-persist-remove-all)
  ;; TAB  toggle fold - stole this from org mode
  (evil-global-set-key 'normal (kbd "TAB") 'evil-toggle-fold))

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(ansi-color-names-vector
   ["#ede9e7" "#ef001b" "#8cc610" "#eea806" "#23cbfe" "#ec3691" "#1ee079" "#272b34"])
 '(custom-safe-themes
   (quote
    ("a47a92a315222b32da1c4a37147df3c9077c564223dff152a494ecb2e1c34f28" "dcf3ee7a5297a79fd7d0d746d126d5e946415392e67022bd99551c0ef9d557c1" "91d515a4a38e914876134873aefd67f6bec9732adaf9832de9b1934a6aeebffb" "1025f053e23ecc782194175337cddfbf79ceb714ad54f068b9804a5c04fc6fee" "edd7df32cfba45d95c1f00b755d960f5f53a55a0eb26d2ea924e9a0a7434f6eb" default)))
 '(evil-want-Y-yank-to-eol t)
 '(package-selected-packages
   (quote
    (nlinum-relative nlinum flyspell-popup tannat-theme hlinum org pcache minitest insert-shebang hide-comnt flyspell-correct package-lint inflections seq spinner clojure-mode multiple-cursors iedit highlight yasnippet inf-ruby vagrant-tramp vagrant theme-changer sunshine rase rainbow-mode rainbow-identifiers osx-location material-theme imenu-list helm-dash fasd grizzl evil-cleverparens dockerfile-mode docker tablist docker-tramp dash-at-point color-identifiers-mode all-the-icons font-lock+ auto-complete git-gutter request markdown-mode alert hydra company js2-mode window-numbering which-key web-mode use-package spacemacs-theme persp-mode org-plus-contrib org-download olivetti matlab-mode magit-gitflow lfe-mode less-css-mode intero hindent helm-ag github-search git-messenger git-link exec-path-from-shell evil-unimpaired evil-matchit evil-exchange evil-ediff editorconfig dumb-jump coffee-mode bundler auto-yasnippet ace-link cider tern anzu smartparens evil flycheck haskell-mode helm helm-core avy projectile magit magit-popup git-commit with-editor f dash yaml-mode xterm-color ws-butler wordsmith-mode wolfram-mode web-beautify volatile-highlights uuidgen undo-tree typo toc-org thrift terraform-mode tagedit stan-mode sql-indent spaceline smex smeargle slim-mode sibilant-mode shell-pop scss-mode scad-mode sass-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe reveal-in-osx-finder restart-emacs rbenv ranger rake rainbow-delimiters queue quelpa qml-mode psci psc-ide popwin pcomplete-extension pcmpl-homebrew pcmpl-git pcmpl-args pbcopy paradox osx-trash osx-dictionary orgit org-projectile org-present org-pomodoro org-bullets open-junk-file neotree multi-term move-text mmm-mode markdown-toc magit-gh-pulls macrostep lorem-ipsum livid-mode linum-relative link-hint launchctl julia-mode json-mode js2-refactor js-doc jinja2-mode jade-mode info+ indent-guide idris-mode ido-vertical-mode ibuffer-projectile hungry-delete htmlize hlint-refactor hl-todo highlight-parentheses highlight-numbers highlight-indentation help-fns+ helm-themes helm-swoop helm-projectile helm-mode-manager helm-make helm-hoogle helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet haskell-snippets graphviz-dot-mode goto-chg google-translate golden-ratio gnuplot github-clone github-browse-file gitconfig-mode gitattributes-mode git-timemachine git-gutter-fringe git-gutter-fringe+ gist gh-md flyspell-correct-helm flycheck-pos-tip flycheck-package flycheck-mix flycheck-haskell flycheck-elm flx-ido fish-mode fill-column-indicator farmhouse-theme fancy-battery eyebrowse expand-region evil-visualstar evil-visual-mark-mode evil-tutor evil-surround evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-escape evil-args evil-anzu eshell-z eshell-prompt-extras esh-help erlang emoji-cheat-sheet-plus emmet-mode elm-mode elisp-slime-nav diminish diff-hl define-word company-web company-tern company-statistics company-shell company-quickhelp company-ghci company-ghc company-emoji company-cabal column-enforce-mode cmm-mode clojure-snippets clj-refactor clean-aindent-mode cider-eval-sexp-fu chruby bind-key bats-mode auto-highlight-symbol auto-dictionary auto-compile async arduino-mode ansible-doc ansible alchemist aggressive-indent adaptive-wrap ace-window ace-jump-helm-line ac-ispell)))
 '(paradox-github-token t)
 '(ring-bell-function (quote ignore))
 '(when
      (or
       (not
        (boundp
         (quote ansi-term-color-vector)))
       (not
        (facep
         (aref ansi-term-color-vector 0))))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil)))))
