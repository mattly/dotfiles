;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(defun dotspacemacs/layers ()
  "Configuration Layers declaration."
  (setq-default
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (ie. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     (auto-completion :variables
                      auto-completion-use-tab-instead-of-enter t
                      auto-completion-enable-company-help-tooltip t)
     better-defaults
     (clojure :variables
              clojure-enable-fancify-symbols t)
     emacs-lisp
     erlang-elixir
     (eyebrowse :variables
                eyebrowse-display-help nil)
     (git :variables
          git-gutter-use-fringe t)
     html
     javascript
     lua
     markdown
     org
     osx
     prodigy
     python
     ruby
     scala
     shell
     shell-scripts
     smex
     sql
     syntax-checking
     )
   ;; List of additional packages that will be installed wihout being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(farmhouse-theme

                                      jsx-mode
                                      nodejs-repl
                                      om-mode
                                      nvm

                                      flycheck-package
                                      editorconfig

                                      pcmpl-args
                                      pcomplete-extension
                                      pcmpl-homebrew
                                      pcmpl-git

                                      wordsmith-mode
                                      osx-dictionary)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '(neotree org-repo-todo)
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration."
  (setq spacemacs-theme-name-to-package
        `(,@spacemacs-theme-name-to-package
          (farmhouse-light . farmhouse-theme)
          (farmhouse-dark . farmhouse-theme)))
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; Either `vim' or `emacs'. Evil is always enabled but if the variable
   ;; is `emacs' then the `holy-mode' is enabled at startup.
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer.
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to a .PNG file.
   ;; If the value is nil then no banner is displayed.
   ;; dotspacemacs-startup-banner 'official
   dotspacemacs-startup-banner 'official
   ;; t if you always want to see the changelog at startup
   dotspacemacs-always-show-changelog t
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'."
   dotspacemacs-startup-lists '(recents projects)
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(farmhouse-light
                         farmhouse-dark)
   ;; If non nil the cursor color matches the state color.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Input Mono Narrow"
                               :size 14
                               :weight light
                               :width normal
                               :powerline-scale 1.5)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it.
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil the paste micro-state is enabled. While enabled pressing `p`
   ;; several times cycle between the kill ring content.
   dotspacemacs-enable-paste-micro-state t
   ;; Guide-key delay in seconds. The Guide-key is the popup buffer listing
   ;; the commands bound to the current keystrokes.
   dotspacemacs-guide-key-delay 0.4
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil ;; to boost the loading time.
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up.
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX."
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'.
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line.
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen.
   dotspacemacs-smooth-scrolling t
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   dotspacemacs-smartparens-strict-mode nil
   ;; Select a scope to highlight delimiters. Possible value is `all',
   ;; `current' or `nil'. Default is `all'
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now.
   dotspacemacs-default-package-repository nil
   )
  ;; User initialization goes here
  (setq-default
   git-enable-github-support t
   git-magit-status-fullscreen t)
  )

(defun dotspacemacs/config ()
  "Configuration function.
 This function is called at the very end of Spacemacs initialization after
layers configuration."
  ;; (require 'nvm)

  ;; auto complete
  (setq read-buffer-completion-ignore-case t
        completion-ignore-case t
        read-file-name-completion-ignore-case t)

  ;; auto save
  (auto-save-mode 1)

  ;; flycheck
  (eval-after-load 'flycheck
    '(flycheck-package-setup))

  ;; git-gutter
  (setq git-gutter-fl:side 'left-fringe)

  ;; lisp-micro-state
  ;; override the built-in evil-lisp-state commands
  (dolist (item `(("H" . sp-beginning-of-previous-sexp)
                  ("j" . sp-down-sexp)
                  ("k" . sp-up-sexp)
                  ("L" . sp-beginning-of-next-sexp)))
    (let ((key (car item))
          (cmd (cdr item)))
      (eval
       `(progn
          (define-key evil-lisp-state-map ,(kbd key) ',cmd)
          (if evil-lisp-state-global
              (evil-leader/set-key
                ,(kbd (concat evil-lisp-state-leader-prefix " " key))
                (evil-lisp-state-enter-command ,cmd))
            (dolist (mm evil-lisp-state-major-modes)
              (evil-leader/set-key-for-mode mm
                ,(kbd (concat evil-lisp-state-leader-prefix " " key))
                (evil-lisp-state-enter-command ,cmd))))))))

  ;; magit
  (setq
   magit-repo-dirs '("~/code/mattly/" "~/code/wcm" "~/code/gemini"))

  ;; org
  (setq
   org-bullets-bullet-list '("❖" "✤" "✱" "⦿" "✳︎" "▪︎" "•" "・")
   org-capture-templates '(("i" "Inbox"
                            item (file+headline "~/Documents/notes.org" "Inbox")
                            "- %?\n")
                           ("j" "Journal Entry"
                            entry (file+datetree "~/Documents/journal.org")
                            "* %?"
                            :empty-lines 1)
                           ("t" "Todo" entry
                            (file+headline "~/Documents/notes.org" "Inbox")
                            "** TODO %?")
                           )
   org-default-notes-file "~/Documents/notes.org"
   org-return-follows-link 1
   org-todo-keywords '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                       (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)")))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (ruby t)
     (sh t)))
  (evil-declare-key 'normal evil-org-mode-map (kbd "<RET>") 'org-open-at-point)
  (evil-declare-key 'normal evil-org-mode-map (kbd "L") 'org-toggle-link-display)
  (evil-leader/set-key
    "CC" 'org-capture)

  ;; prodigy
  (load "~/code/emacs.prodigy.el" t)

  ;; powerline
  (setq powerline-default-separator 'slant)
  (spacemacs|diminish visual-line-mode " vl")

  ;; themes
  ;; reset themes when loading a new one
  (defun disable-all-themes ()
    "disable all active themes."
    (dolist (i custom-enabled-themes)
      (disable-theme i)))
  (defadvice load-theme (before disable-themes-first activate)
    (disable-all-themes))

  ;; tab stops
  (setq-default indent-tabs-mode nil)
  (setq default-tab-width 2
        tab-width 2
        css-indent-offset 2
        evil-shift-width 2
        json-encoding-default-indentation 2
        web-mode-css-indent-offset 2
        web-mode-markup-indent-offset 2
        web-mode-code-indent-offset 2)

  ;; * NORMAL
  ;; RET  clears highlight
  (evil-global-set-key 'normal (kbd "RET") 'evil-search-highlight-persist-remove-all)
  ;; TAB  toggle fold - stole this from org mode
  ;; TODO why isn't this working
  (evil-global-set-key 'normal (kbd "TAB") 'evil-toggle-fold)
  ;; Y    Copies to end of line, like vim
  (define-key evil-normal-state-map "Y" (kbd "y$"))

  ;; file associatons
  (add-to-list 'auto-mode-alist '("\\.es6\\'" . js2-mode))

  ;; mode hooks
  (defun my-web-mode-hook ()
    "Hooks for Web Mode"
    (message "web mode hook enabled")
    (define-key web-mode-map (kbd "C-/") 'web-mode-element-close)
    (setq web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2
          web-mode-scss-indent-offset 2
          web-mode-code-indent-offset 2
          web-mode-style-padding 1
          web-mode-script-padding 1
          web-mode-block-padding 0))
  (add-hook 'web-mode-hook 'my-web-mode-hook)
)

;; Do not write anything past this comment. This is where Emacs will
;; auto-generate custom variable definitions.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ahs-case-fold-search nil)
 '(ahs-default-range (quote ahs-range-whole-buffer))
 '(ahs-idle-interval 0.25)
 '(ahs-idle-timer 0 t)
 '(ahs-inhibit-face-list nil)
 '(paradox-github-token t)
 '(ring-bell-function (quote ignore) t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(company-tooltip-common ((t (:inherit company-tooltip :weight bold :underline nil))))
 '(company-tooltip-common-selection ((t (:inherit company-tooltip-selection :weight bold :underline nil)))))
